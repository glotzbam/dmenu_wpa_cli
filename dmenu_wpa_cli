#!/usr/bin/env python3

"""
dmenu_wpa_cli

A tool for switching between pre-configured networks,
managed by wpa_supplicant, usually in conjunction
with netctl, using dmenu.
"""

__author__      = "Max Glotzbach"
__copyright__   = "Copyright 2017, Max Glotzbach"
__license__     = "Apache-2.0"
__status__      = "Development"

from subprocess import getoutput
from sys import exit
from time import sleep

# globals {{{

wpa_scan_timeout_s  = 2
show_flags          = True
divider_string      = "Unconfigured networks"
divider_linesym     = u'━'
symbol_secure       = u''
symbol_insecure     = u''

# }}}

# Class definitions {{{

class WPAInterface(object): # {{{
    """
    makes calls to wpa_cli and 
    preprocesses the results
    """

    def __init__(self, logging=False):
        """
        with logging enabled, every call to wpa_cli 
        will leave a trace in wpa_supplicant's log files
        ---
        NOT IMPLEMENTED YET!
        """
        self._logging = logging

    def list_known_networks(self):
        return getoutput('wpa_cli list_networks').splitlines()[2:]

    def select_network(self, network_id, notification=None):
        getoutput("wpa_cli select_network %i" % network_id)

    def scan_available_networks(self, timeout):
        getoutput("wpa_cli scan")
        sleep(timeout)
        getoutput("wpa_cli abort_scan")

        return getoutput("wpa_cli scan_results").splitlines()[2:]
# }}}


class Network(object): # {{{
    """
    Holds a wifi network definition
     as described by wpa_supplicant
    """
    def __init__(self, description=None, known=False):
        self.bssid = None
        self.network_id = -2
        self.name = None
        self.frequency = None
        self.signal_level = -95
        self.flags = None
        self.active = " "
        self.secure = symbol_insecure
        self.known = False

        if description is None:
            return

        if known:
            self._parse_from_known(description)
            self.known = True
        else:
            self._parse_from_unknown(description)


    def _parse_from_known(self, description):
        """
        parse wpa_cli's description of a pre-configured network
        """
        nw = description.split("\t")

        self.name = nw[1]
        self.network_id = int(nw[0])
        self.active = "*" if nw[3] == "[CURRENT]" else " "
        self.flags = ""


    def _parse_from_unknown(self, description):
        """
        parse wpa_cli's description of a unknown network
        """
        nw = description.split('\t')

        self.bssid = nw[0]
        self.frequency = nw[1]
        self.signal_level = int(nw[2])
        self.flags = nw[3]
        self.name = nw[4]

        if self.flags.find('WPA') > -1 or self.flags.find('WEP') > -1:
            self.secure = symbol_secure

    def augment(self, nw):
        self.bssid = nw.bssid
        self.frequency = nw.frequency
        self.signal_level = nw.signal_level
        self.flags = nw.flags
        self.secure = nw.secure

    def get_signal_strength(self):
        """
        Calculates a percentage of the
        signal dBm value. Base of calculation
        is a perfect signal at -30dBm,
        unable to connect at -90dBm.
        That gives a range of 60dBm wich
        make up the scale from 0 to 100 percent.
        """
        
        level = abs(self.signal_level) - 30
        return 100 - 60 * level / 100


    def __getattr__(self, name):
        if name == 'signal_strength':
            return self.get_signal_strength()
        else:
            raise AttributeError
# }}}


class NetworkList(object): # {{{
    def __init__(self, wi, scan_timeout=wpa_scan_timeout_s):
        """
        A scan timeout of 0 means, that
        the networks won't be scanned,
        instead the list will be made up
        solely of the networks wich
        are pre configured.

        This approach is the fastest,
        with the disadvantage, that
        you don't know if your chosen
        network is within reach.
        ---
        ZERO TIMEOUT NOT IMPLEMENTED YET!
        """
        self._networks = []
        self._wpa_interface = wi
        self._widest_name = 0
        self._widest_flags = 0

        self._import_known_networks()

        if scan_timeout > 0:
            self._import_scanned_networks(scan_timeout)

        self._networks.sort(key=lambda nw: nw.signal_level, reverse=True)

    def _import_known_networks(self):
        descriptions = self._wpa_interface.list_known_networks()

        for line in descriptions:
            self.add_network(Network(line, known=True))

    def _import_scanned_networks(self, timeout):
        descriptions = self._wpa_interface.scan_available_networks(timeout)

        for line in descriptions:
            self.add_network(Network(line))


    def __getitem__(self, item):
        """
        lookup networks either by name or by index
        """
        if type(item) == int:
            return self._networks[item]

        elif type(item) == str:
            index = self._by_name(item)

            if index == -1:
                return None

            if index == -2:
                return Network()

            return self._networks[index]

    def _by_name(self, name):
        if name == divider_string:
            return -2

        for index in range(len(self._networks)):
            if self._networks[index].name == name:
                return index

        return -1

    def add_network(self, network):
        """
        If there already is an ap named
        like the one to be added, it will 
        override the present one as long 
        as it has the stronger signal
        """
        index = self._by_name(network.name)

        if index == -1:
            self._networks.append(network)
            self._determine_widest_strings()
        else:
            nw = self._networks[index]

            if network.signal_level > nw.signal_level:
                nw.augment(network)
                self._determine_widest_strings()

    def _determine_widest_strings(self):
        self._widest_name = 0
        self._widest_flags = 0

        for nw in self._networks:
            if len(nw.name) > self._widest_name:
                self._widest_name = len(nw.name)

            if len(nw.flags) > self._widest_flags:
                self._widest_flags = len(nw.flags)

    def generate_menu(self, show_flags=True):
        if show_flags:
            total_width = 14 + self._widest_name + self._widest_flags
            template = u"{active} {secure} {name:<%d} [{signal_level:+03d} dBm] {flags:>%d}\n" % (self._widest_name, self._widest_flags)
        else:
            total_width = 14 + name_width
            template = u"{active} {secure} {name:<%d} [{signal_level:+03d} dBm]\n" % (name_width)

        top = ""
        bottom = ""
        divider_tpl = " {:%s^%d}\n" % (divider_linesym, total_width)
        
        for nw in self._networks:
            if nw.known:
                top += template.format(**nw.__dict__)
            else:
                bottom += template.format(**nw.__dict__)
        
        menu = top + divider_tpl.format(" %s " % divider_string) + bottom

        return menu[:-1]

# }}}

# }}}

def gui_available():
    if getoutput('which wpa_gui') == None:
        return False
    
    return True

def invoke_dmenu(menu):
    command = 'echo "%s" | dmenu -l %i -p "Available Networks" -i'
    raw = getoutput(command % (menu, len(menu)))
    return raw[3:].split('[')[0].strip("\t \n"+divider_linesym)

def switch_to_network(wpa_interface, network_id):
    if network_id == -2 and gui_available():
        getoutput('wpa_gui')

    else:
        wpa_interface.select_network(network_id)


def main():
    wpa_interface = WPAInterface()
    netlist = NetworkList(wpa_interface)
    menu = netlist.generate_menu()
    result = netlist[invoke_dmenu(menu)]

    if result is None:
        exit(1)

    switch_to_network(wpa_interface, result.network_id)

if __name__ == '__main__':
    main()
